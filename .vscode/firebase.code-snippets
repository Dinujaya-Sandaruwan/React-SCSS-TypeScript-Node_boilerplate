{
    "D-firebase-config-full": {
        "prefix": "D-firebase-config-full",
        "body": [
            "// Import the functions you need from the SDKs you need",
            "import { initializeApp } from 'firebase/app';",
            "import { getFirestore } from 'firebase/firestore';",
            "import { getAuth, GoogleAuthProvider } from 'firebase/auth';",
            "import { getStorage } from 'firebase/storage';",
            "",
            "const firebaseConfig = {",
            "  apiKey: 'YOUR_API_KEY',",
            "  authDomain: 'YOUR_AUTH_DOMAIN',",
            "  projectId: 'YOUR_PROJECT_ID',",
            "  storageBucket: 'YOUR_STORAGE_BUCKET',",
            "  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',",
            "  appId: 'YOUR_APP_ID',",
            "};",
            "",
            "// Initialize Firebase",
            "const app = initializeApp(firebaseConfig);",
            "export const db = getFirestore(app);",
            "export const auth = getAuth(app);",
            "export const storage = getStorage(app);",
            "export const googleProvider = new GoogleAuthProvider();"
        ],
        "description": "Full Firebase configuration for React project"
    },
    "AddDataComponent": {
        "prefix": "D-firebase-add",
        "body": [
            "import { useFirestoreAddData } from '../hooks/firebase/useFirestoreAddData';",
            "",
            "function ${TM_FILENAME_BASE}() {",
            "  const { status: addStatus, error: addError, addData } = useFirestoreAddData({",
            "    collectionName: 'your_collection_name',",
            "    data: {",
            "      /* Replace with the data you want to add */",
            "    },",
            "    onDataAdded: () => {",
            "      console.log('Data added successfully!');",
            "      // Additional actions to perform after data is added",
            "    },",
            "  });",
            "",
            "  const handleAddData = async () => {",
            "    await addData();",
            "    // Data has been added, you can perform further actions if needed",
            "  };",
            "",
            "  return (",
            "    <div>",
            "      <button onClick={handleAddData} disabled={addStatus === 'loading'}>",
            "        {addStatus === 'loading' ? 'Adding...' : 'Add Data'}",
            "      </button>",
            "      {addStatus === 'error' && <p>Error: {addError}</p>}",
            "    </div>",
            "  );",
            "}",
            "",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "React component for adding data to Firestore"
    },
    "DeleteDataComponent": {
        "prefix": "D-firebase-delete",
        "body": [
            "import { useFirestoreDeleteData } from '../hooks/firebase/useFirestoreDeleteData';",
            "",
            "function ${TM_FILENAME_BASE}() {",
            "  const { status: deleteStatus, error: deleteError, deleteData } = useFirestoreDeleteData({",
            "    collectionName: 'your_collection_name',",
            "  });",
            "",
            "  const handleDeleteData = async (documentId: string) => {",
            "    await deleteData(documentId);",
            "    // Data has been deleted, you can perform further actions if needed",
            "  };",
            "",
            "  return (",
            "    <div>",
            "      <button onClick={() => handleDeleteData('document_id')} disabled={deleteStatus === 'loading'}>",
            "        {deleteStatus === 'loading' ? 'Deleting...' : 'Delete Data'}",
            "      </button>",
            "      {deleteStatus === 'error' && <p>Error: {deleteError}</p>}",
            "    </div>",
            "  );",
            "}",
            "",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "React component for deleting data from Firestore"
    },
    "GetDataComponent": {
        "prefix": "D-firebase-get",
        "body": [
            "import { useFirestoreGetData } from '../hooks/firebase/useFirestoreGetData';",
            "",
            "function ${TM_FILENAME_BASE}() {",
            "    const {",
            "        status: getStatus,",
            "        data,",
            "        error: getError,",
            "    } = useFirestoreGetData({",
            "        collectionName: 'your_collection_name',",
            "    });",
            "",
            "    if (getStatus === 'loading') {",
            "        return <p>Loading...</p>;",
            "    }",
            "",
            "    if (getStatus === 'error') {",
            "        return <p>Error: {getError}</p>;",
            "    }",
            "",
            "    return (",
            "        <div>",
            "            {(data as { docId: string }[]).map((item) => (",
            "                <p key={item.docId}>{JSON.stringify(item)}</p>",
            "            ))}",
            "        </div>",
            "    );",
            "}",
            "",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "React component for getting data from Firestore"
    },
    "UpdateDataComponent": {
        "prefix": "D-firebase-update",
        "body": [
            "import { useState } from 'react';",
            "import { useFirestoreUpdateData } from '../hooks/firebase/useFirestoreUpdateData';",
            "",
            "function ${TM_FILENAME_BASE}() {",
            "    const [newData, setNewData] = useState('');",
            "    const [documentId, setDocumentId] = useState('');",
            "",
            "    const {",
            "        status: updateStatus,",
            "        error: updateError,",
            "        updateData,",
            "    } = useFirestoreUpdateData({",
            "        collectionName: 'your_collection_name',",
            "    });",
            "",
            "    const handleUpdate = async () => {",
            "        if (documentId && newData) {",
            "            try {",
            "                await updateData(documentId, { fieldToUpdate: newData });",
            "                // Handle successful update",
            "            } catch (err) {",
            "                // Handle error",
            "            }",
            "        }",
            "    };",
            "",
            "    return (",
            "        <div>",
            "            <input",
            "                type=\"text\"",
            "                value={documentId}",
            "                onChange={(e) => setDocumentId(e.target.value)}",
            "                placeholder=\"Enter document ID\"",
            "            />",
            "            <input",
            "                type=\"text\"",
            "                value={newData}",
            "                onChange={(e) => setNewData(e.target.value)}",
            "                placeholder=\"Enter new data\"",
            "            />",
            "            <button",
            "                onClick={handleUpdate}",
            "                disabled={updateStatus === 'loading'}",
            "            >",
            "                Update Data",
            "            </button>",
            "            {updateStatus === 'loading' && <p>Loading...</p>}",
            "            {updateStatus === 'error' && <p>Error: {updateError}</p>}",
            "            {updateStatus === 'success' && <p>Data updated successfully!</p>}",
            "        </div>",
            "    );",
            "}",
            "",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "React component for updating data in Firestore"
    }
}
